{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","console","log","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","intialStateSearch","intialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6c8bbe0e.chunk.js","sourcesContent":["import React from 'react';\nimport'./Card.css';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className= 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' id='Card'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n    console.log('CardList')\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={robots[i].id}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({ searchChange }) => {\n    console.log('SearchBox')\n    return (\n        <div>\n        <input className= 'pa3 ba b--green bg-lightest-blue'\n        aria-label=\"A place for robots to meet\"\n        type='search' \n        placeholder='search robots'\n        onChange={searchChange}\n        >\n       \n        </input>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '80vh' }}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;\n\n//Scroll uses children to render props.children (create components that wrap around other components)","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n        componentDidCatch(error, info) {\r\n            this.setState({ hasError: true })\r\n        }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n           return <h1>Ooops. That is not good...</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n// import CounterButton from './counterbutton';\r\n\r\nclass Header extends Component {\r\n    //DECIDES WHETHER OR NOT TO UPDATE THE STATE UPON RE-RENDERING\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n       return (\r\n       <div>\r\n           \r\n       <h1 className='f1'>RoboFriends</h1>\r\n        {/* <CounterButton style={{color: \"red\"}} />    */}\r\n       </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport Scroll from './components/Scroll';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport Header from './components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from './actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return { \n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n        })\n        return isPending ?\n        <h1>Loading</h1> :\n        (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n        );\n        }\n\n    }\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants.js';\r\n\r\n//action is going to take text and return an object of type/payload\r\nexport const setSearchField = (text) => ({\r\n    type:  CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch( { type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants.js';\r\n\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n} \r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false }) \r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App'\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App /> \n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}